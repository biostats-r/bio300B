---
title: "Assignment 1 feedback"
subtitle: "Bio300B"
author: "Richard J. Telford (Richard.Telford@uib.no)"
institute: "Institutt for biovitenskap, UiB"
date: today
output: html
---

## Assignment 1 model answer

load packages

```{r}
#| label: load-packages
#| message: false
#activate the package
library(tidyverse)
```

- only tidyverse required.
- can load readr, dplyr, tidyr separately instead by little or no advantage to that.

```{r}
#| label: load-data
#| message: false
 
#import file into object
biomass <- read_delim(file = "data/biomass2015_H.csv")
```


- Must use relative path (not absolute) to the file.
- Best to use `readr` functions such as `read_delim` rather than base R functions such as `read.table`.
- Can remove or process data in the import step but unnecessary.

Data has multiple height columns (H1:H10). 
In tidy data, each variable has a column (not 10 columns). 
Can pivot the data so all height data in one column.

It is very difficult to do the analysis correctly without tidying the data.

```{r}
#| label: tidy
#tidy data
biomass_long <- biomass |>
  pivot_longer(cols = H1:H10, 
               names_to = "height", 
               values_to = "value",
               values_drop_na = TRUE)
```

The `values_drop_na` argument drops the `NA` height values.
This is more efficient than dealing with them later. 

Alternatively 

```{r}
#| label: alternative-tidy
# alternative tidy data
biomass_long <- biomass |>
  pivot_longer(cols = H1:H10, 
               names_to = "height", 
               values_to = "value") |> 
  drop_na(value)

# or
biomass_long <- biomass |>
  pivot_longer(cols = H1:H10, 
               names_to = "height", 
               values_to = "value") |> 
  filter(!is.na(value))

```

- don't use `drop_na()` without a column name or it will drop any row with an NA in any column, which can remove lots of good data.

```{r}
#mean height with 10 or more observations
min_no_measurements <- 10
biomass_mean_height <- biomass_long |>                     
  group_by(species) |> 
  filter(n() >= min_no_measurements) |> 
  summarise(mean_height = mean(value)) |> 
  arrange(desc(mean_height))
```

- can also use `mutate(n = n())` or `add_count()` followed by `filter(n >= min_no_measurements)`

Also possible to use `count()` to get the number of observations and then `left_join()` to join this to the summarised data. 
This works but is much slower and more effort.

Making a vector of the names of taxa to be dropped is not reproducible.

# Result

```{r, message = FALSE, echo = FALSE}
biomass_mean_height
```

The tallest species is `r biomass_mean_height$species[1]` with a mean height of `r round(biomass_mean_height$mean_height[1], 2)` cm.

- need to use inline R code for reproducibility

# more comments

# Importing the data

```{r, eval = FALSE}
biomass <- read_delim(file = "data/biomass2015_H.csv") # best

read.delim() # not ideal
# Use Rstudio projects with relative paths
setwd("___") # bad idea
read_csv("my drive/Biostatistics/datalab 2/biomass2015_H.csv") # bad idea
file.choose() # very bad idea - need to find the file every time
```
 

# need to pivot longer

This will fail badly - any row with H10 missing will be deleted - lots of data lost.
```{r}
# very hard to do without pivot longer
biomass %>%
  drop_na(H1:H10) %>% 
  group_by(species) %>% 
  summarise(mean_value = mean(H1:H10))
```

 

# Removing the NA

Must be done in or after pivot_longer()

```{r}
biomass %>%   
  drop_na(H1:H10) %>%      #Remove all NA values
  pivot_longer(cols = H1:H10, names_to = "Height", values_to = "value") |> 
  summarise(n = n())
```
```{r}
biomass %>%   
  pivot_longer(cols = H1:H10, names_to = "Height", values_to = "value") |> 
  drop_na(value) |> 
  summarise(n = n())
```






# filter fun

```{r, eval=FALSE}
Biomass_long |> drop_na(value) # easiest - best
Biomass_long |> filter(!is.na(value)) # good


Biomass_long |> filter(value != "NA") # accidentally works
Biomass_long |> filter(value >= 0) # accidentally works

Biomass_long |> na.omit() # dangerous
```



# dropping rare taxa

`n()`
or `add_count()` AFTER `group_by()`

```{r}
# with mutate
biomass_long |> 
  group_by(species) |>  
  mutate(n = n()) |>  
  filter(n< 10)

# one step
biomass_long |> 
  group_by(species) |>  
  filter(n() < 10)

```


Non-reproducible 

```{r}
#gjsnitt hÃ¸yde til de med mer enn 10 
summarise(group_by(biomass_long, species),
          mean(value, na.rm= TRUE)) %>% 
  filter(species != ("Agrostis")) %>% 
  filter(species != ("Fragaria orientalis")) %>% 
  filter(species != ("Gentiana trichotoma ")) %>%  
  filter(species != ("Halenia elliptica")) %>%  
  filter(species != ("Juncus leucomelas")) %>%  
  filter(species != ("Ligusticum scapiforme")) %>%  
  filter(species != ("Pedicularis.sp")) %>% 
  filter(species != ("Primula amethystina subsp.argutidens")) %>% 
  filter(species != ("mix")) %>% 
  filter(species != ("Rhodiola bupleuroides"))
```


# select()?

Unnecessary to use select to remove columns as summarise will remove excess columns anyway.
Removing them before the pivot_longer is no faster (but more memory efficient) than removing them afterwards.

```{r}
mb <- bench::mark(
  BEFORE =  biomass |> 
  select(species, H1:H10) |> 
  pivot_longer(cols = H1:H10, 
               names_to = "height", 
               values_to = "value"),
 AFTER = biomass |>
  pivot_longer(cols = H1:H10, 
               names_to = "height", 
               values_to = "value") |> 
  select(species, value), 
  check = FALSE
)

mb

```




# comments

- long comments at ends of lines are difficult to read.
- Put long comments on line before code

# weeds

Remove unused code

```{r, eval = FALSE}
# All the height column which have 10 readings (removed all NA)
View(height_all)
names(height_all)
str(height_all)
height_all_long <- height_all |> pivot_longer(cols = H1:H10, names_to = "heights", values_to = "height")
view(height_all_long)

```






