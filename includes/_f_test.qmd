```{shinylive-r}
#| label: regression-line-ss-app
#| standalone: true
#| viewerHeight: 600
library(shiny)
 ui <- fluidPage(
  
      # Application title
      titlePanel("F test"),
  
      # Sidebar with a slider input for number of bins
      sidebarLayout(
          sidebarPanel(
            HTML('
<style>
.frac {
    display: inline-block;
    position: relative;
    vertical-align: middle;
    letter-spacing: 0.001em;
    text-align: center;
}
.frac > span {
    display: block;
    padding: 0.1em;
}
.frac span.bottom {
    border-top: thin solid black;
}
.frac span.symbol {
    display: none;
} 
</style>
 <div class="frac">
    <h3><span>SS<sub>regression</sub>/df<sub>regression</sub></span></h3>
    <span class="symbol">/</span>
    <h3><span class="bottom">SS<sub>residual</sub>/df<sub>residual</sub></span></h3>
</div>
     '),
              sliderInput("numerator",
                          "Regression degrees of freedom:",
                          min = 1,
                          max = 10,
                          round = TRUE,
                          value = 1),
              sliderInput("denominator",
                          "Residual degrees of freedom:",
                          min = 1,
                          max = 10,
                          round = TRUE,
                          value = 5),
              radioButtons("alpha",
                          "\u03b1:",
                          c("p = 0.05" = "0.05", "p = 0.01" = "0.01")
              )
          ),
  
          # Show a plot of the generated distribution
          mainPanel(
             plotOutput("distPlot")
          )
      )
  )



# Define server logic required to draw a histogram
f_test_server <- function(input, output) {

    output$distPlot <- renderPlot({
        # generate bins based on input$bins from ui.R
       axis_max <- 500
        xmax <- min(axis_max, qf(p = 0.995, df1 = input$numerator, df2 = input$denominator))
        x    <- seq(0, ceiling(xmax), length.out = 200)
        y <- df(x, df1 = input$numerator, df2 = input$denominator)
        x <- x[is.finite(y)]
        y <- y[is.finite(y)]
        
        xthresh <- qf(p = 1 - as.numeric(input$alpha), df1 = input$numerator, df2 = input$denominator)
        if(xthresh > axis_max) {
          xthresh <- NA_real_
          x2 <- numeric(0)
        } else {
          x2 <- seq(xthresh, ceiling(xmax), length.out = 100)
        }
        y2 <- df(x2, df1 = input$numerator, df2 = input$denominator)
        df2 <- data.frame(x = x2, y = y2)
        
        par(cex = 1.5, mar = c(3, 3, 1, 1), tcl = -0.1, mgp = c(2, 0.2, 0))
        plot(x, y, type = "n", 
             xlab = expression(italic(F)~value),
             ylab = "Density")
        polygon(c(x[1], x, x[length(x)]), c(0, y, 0), col = "grey80", border = NA)
        polygon(c(x2[1], x2, x2[length(x2)]), c(0, y2, 0), col =  "#832424", border = NA)
        lines(x, y)
        text(xthresh, 
             y2[1] + 0.05 * (max(y)- y2[1]), 
             labels = bquote(italic(F)[.(input$numerator)*','~.( input$denominator)*';'~.(input$alpha)]==.(round(xthresh, 2))), 
             adj = 0
            )

 
        #   annotate(geom = "text", x = , y = y2[1] + 0.05 * (max(y[is.finite(y)])- y2[1]), label =, hjust = 0, vjust = 0, parse = TRUE, size = 5)
    })
}
  # Run the application
  shinyApp(ui = ui, server = f_test_server)
```

