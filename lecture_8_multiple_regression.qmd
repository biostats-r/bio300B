---
title: "Multiple Regression"
subtitle: "Bio300B Lecture 8"
author: "Richard J. Telford (Richard.Telford@uib.no)"
institute: "Institutt for biovitenskap, UiB"
date: today
date-format: "D MMMM YYYY"
format: 
  revealjs:
    theme: [default, css/custom.scss]
    chalkboard: true
    resources: 
      - shinylive-sw.js
filters:
  - shinylive
execute: 
  echo: true
  warning: false
  error: true
---

## Outline

```{r}
#| label: setup
#| echo: false
#| message: false
library("tidyverse")
library("patchwork")
library(broom)
library(glue)
theme_set(theme_bw(base_size = 18))
data(penguins, package = "palmerpenguins")
options(dplyr.print_min = 5, dplyr.print_max = 5, digits = 4)
```


- Types of models
- Interactions
- Model selection
  - Exploratory data analysis
  - Anova for hypothesis testing
- Multi-collinearity
- Autocorrelation
- Reporting statistics

## Adding more variables

```{r}
# Two way anova - two categorical predictors
mod_anova2 <- lm(bill_length_mm ~ sex + species, data = penguins)

# ancova - one categorical one continuous predictor
mod_ancova <- lm(bill_length_mm ~ sex + flipper_length_mm, data = penguins)

# Multiple regression - two continuous
mod_mult <- lm(bill_length_mm ~ body_mass_g + flipper_length_mm, data = penguins)
```

---

```{r}
summary(mod_anova2)
```

---

```{r}
summary(mod_ancova)
```

---

```{r}
summary(mod_mult)
```


## Different formula

```{r}
#| label: diff-models-reg
#| fig.height: 6.5
#| echo: false
#| fig.width: 10.0
adelie <- penguins |>
  filter(species == "Adelie") |>
  drop_na(bill_length_mm, flipper_length_mm, sex)


base_plot <- ggplot(adelie, aes(x = flipper_length_mm, y = bill_length_mm)) +
  labs(x = "Flipper length mm", y = "Bill length mm", colour = "Sex")

# intercept only
mod0 <- lm(bill_length_mm ~ 1, data = adelie)

# slope
mod_slope <- lm(bill_length_mm ~ flipper_length_mm, data = adelie)

# categorical predictor
mod_cat <- lm(bill_length_mm ~ sex, data = adelie)

# ancova
mod_ancova <- lm(bill_length_mm ~ sex + flipper_length_mm, data = adelie)

# interaction
mod_interact <- lm(bill_length_mm ~ sex * flipper_length_mm, data = adelie)


preds <- bind_rows(
  "y ~ 1" = adelie |> select(-sex) |> mutate(.fitted = coef(mod0[1])),
  "y ~ x" = augment(mod_slope),
  "y ~ z" = left_join(adelie |> drop_na(sex, flipper_length_mm, bill_length_mm), augment(mod_cat)),
  "y ~ x + z" = augment(mod_ancova),
  "y ~ x * z" = augment(mod_interact),
  .id = "model"
) |>
  left_join(tribble(
    ~model, ~type,
    "y ~ 1", "Intercept only",
    "y ~ x", "Continuous predictor",
    "y ~ z", "Categorical predictor",
    "y ~ x + z", "Continuous & categorical predictors",
    "y ~ x * z", "Interaction"
  )) |>
  mutate(
    model = factor(model, levels = c("y ~ 1", "y ~ x", "y ~ z", "y ~ x + z", "y ~ x * z")),
    type = factor(type, levels = c("Intercept only", "Continuous predictor", "Categorical predictor", "Continuous & categorical predictors", "Interaction")),
    sex2 = if_else(
      type %in% c("Intercept only", "Continuous predictor"),
      true = "Both sexes",
      false = sex
    ),
    sex2 = factor(sex2, levels = c("female", "male", "Both sexes"), labels = c("Female", "Male", "Both sexes"))
  )

base_plot +
  geom_point(data = preds, aes(colour = sex2), alpha = 0.5) +
  geom_line(data = preds, aes(y = .fitted, colour = sex2), linewidth = 1.5) +
  facet_wrap(vars(type, model)) +
  scale_color_brewer(palette = "Set1", na.value = "grey30") +
  theme(legend.position = c(5 / 6, 1 / 4)) +
  guides(colour = guide_legend(override.aes = list(alpha = 1, size = 4)))
```

---

```{r}
#| label: diff-models-anova
#| fig.height: 8.0
#| echo: false
#| fig.width: 10.0
library(ggbeeswarm)


base_plot <- ggplot(penguins |> drop_na(sex, bill_length_mm), aes(x = "Penguin", y = flipper_length_mm)) +
  geom_violin() +
  geom_quasirandom(alpha = 0.3, dodge.width = 1) +
  labs(x = "Species", y = "Flipper length mm") +
  scale_color_brewer(palette = "Set1") +
  theme(axis.title.x = element_blank())

# intercept only
mod0 <- lm(flipper_length_mm ~ 1, data = penguins)

# anova
mod_anova <- lm(flipper_length_mm ~ species, data = penguins)

# 2 way anova
mod_anova2 <- lm(flipper_length_mm ~ species + sex, data = penguins)

# 2 way anova with interaction
mod_interaction <- lm(flipper_length_mm ~ species * sex, data = penguins)



p1 <- base_plot +
  geom_pointrange(
    aes(y = .fitted, ymax = .upper, ymin = .lower),
    data = augment(mod0, interval = "confidence") |> slice(1),
    colour = "red",
    size = 1.1
  ) +
  ggtitle("Intercept only", subtitle = "y ~ 1")



p2 <- base_plot +
  aes(x = species) +
  geom_pointrange(
    aes(y = .fitted, ymax = .upper, ymin = .lower),
    data = augment(mod_anova, interval = "confidence", newdata = distinct(penguins, species)),
    colour = "red",
    size = 1.1
  ) +
  ggtitle("Anova", subtitle = "y ~ x")


p3 <- base_plot +
  aes(x = species, colour = sex) +
  geom_pointrange(
    aes(y = .fitted, ymax = .upper, ymin = .lower, colour = sex),
    data = augment(mod_anova2, interval = "confidence", newdata = distinct(penguins, species, sex) |> drop_na(sex)),
    position = position_dodge(width = 1),
    size = 1.1
  ) +
  ggtitle("Two-way anova", subtitle = "y ~ x + z")


p4 <- base_plot +
  aes(x = species, colour = sex) +
  geom_pointrange(
    aes(y = .fitted, ymax = .upper, ymin = .lower, colour = sex),
    data = augment(mod_interaction, interval = "confidence", newdata = distinct(penguins, species, sex) |> drop_na(sex)),
    position = position_dodge(width = 1),
    size = 1.1
  ) +
  ggtitle("Interaction", subtitle = "y ~ x * z OR y ~ x + z + x:z")


p1 + p2 + p3 + p4 & theme(legend.position = "none")
```

## What is an interaction

Effect of one predictor depends on value of another

```{r}
#| label: interaction
#| fig.width: 8.0
#| fig.height: 6.0
#| echo: false

p1 <- crossing(species = c("A", "B"), sex = c("F", "M")) |>
  mutate(
    mean = if_else(species == "A", 0.9, 2.1),
    mean = if_else(sex == "F", mean, mean + 1)
  ) |>
  ggplot(aes(x = species, y = mean, ymin = mean - 0.5, ymax = mean + 0.5, colour = sex)) +
  geom_pointrange(position = position_dodge(width = .5)) +
  labs(y = "Value", title = "No Interaction", x = "Predictor 1", colour = "Predictor 2")

p2 <- crossing(species = c("A", "B"), sex = c("F", "M")) |>
  mutate(
    mean = if_else(species == "A", 0.9, 2.1),
    mean = if_else(sex == "F", mean, mean + 1),
    mean = if_else(species == "B" & sex == "M", mean + 0.5, mean)
  ) |>
  ggplot(aes(x = species, y = mean, ymin = mean - 0.5, ymax = mean + 0.5, colour = sex)) +
  geom_pointrange(position = position_dodge(width = .5)) +
  labs(y = "Value", title = "Interaction", x = "Predictor 1", colour = "Predictor 2")

p1 + p2 + plot_layout(guides = "collect")
```

## Interaction between categorical predictors

:::: {.columns}

::: {.column width="90%"}
```{r}
mod <- lm(flipper_length_mm ~ species * sex, data = penguins)
summary(mod)
```
:::

::: {.column width="20%"}
```{r}
#| label: species_sex_model
#| echo: false
penguins |>
  drop_na(sex) |>
  ggplot(aes(x = species, y = flipper_length_mm, fill = sex)) +
  geom_violin(draw_quantiles = 0.5) +
  labs(x = "Species", y = "Flipper length mm", fill = "Sex")
```

:::

::::

## Understanding coefficients


```{shinylive-r}
#| label: coef-explain
#| standalone: true
#| viewerHeight: 700
#| echo: false


library(shiny)
library(bslib)

penguins <- structure(list(species = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 2L, 2L, 
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 
2L, 2L), levels = c("Adelie", "Chinstrap", "Gentoo"), class = "factor"), 
    island = structure(c(3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 
    3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 
    2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 3L, 
    3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 
    2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 
    2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 
    3L, 3L, 3L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 
    2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
    1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 
    2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 
    2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 
    2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 
    2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 
    2L, 2L, 2L, 2L, 2L), levels = c("Biscoe", "Dream", "Torgersen"
    ), class = "factor"), bill_len = c(39.1, 39.5, 40.3, NA, 
    36.7, 39.3, 38.9, 39.2, 34.1, 42, 37.8, 37.8, 41.1, 38.6, 
    34.6, 36.6, 38.7, 42.5, 34.4, 46, 37.8, 37.7, 35.9, 38.2, 
    38.8, 35.3, 40.6, 40.5, 37.9, 40.5, 39.5, 37.2, 39.5, 40.9, 
    36.4, 39.2, 38.8, 42.2, 37.6, 39.8, 36.5, 40.8, 36, 44.1, 
    37, 39.6, 41.1, 37.5, 36, 42.3, 39.6, 40.1, 35, 42, 34.5, 
    41.4, 39, 40.6, 36.5, 37.6, 35.7, 41.3, 37.6, 41.1, 36.4, 
    41.6, 35.5, 41.1, 35.9, 41.8, 33.5, 39.7, 39.6, 45.8, 35.5, 
    42.8, 40.9, 37.2, 36.2, 42.1, 34.6, 42.9, 36.7, 35.1, 37.3, 
    41.3, 36.3, 36.9, 38.3, 38.9, 35.7, 41.1, 34, 39.6, 36.2, 
    40.8, 38.1, 40.3, 33.1, 43.2, 35, 41, 37.7, 37.8, 37.9, 39.7, 
    38.6, 38.2, 38.1, 43.2, 38.1, 45.6, 39.7, 42.2, 39.6, 42.7, 
    38.6, 37.3, 35.7, 41.1, 36.2, 37.7, 40.2, 41.4, 35.2, 40.6, 
    38.8, 41.5, 39, 44.1, 38.5, 43.1, 36.8, 37.5, 38.1, 41.1, 
    35.6, 40.2, 37, 39.7, 40.2, 40.6, 32.1, 40.7, 37.3, 39, 39.2, 
    36.6, 36, 37.8, 36, 41.5, 46.1, 50, 48.7, 50, 47.6, 46.5, 
    45.4, 46.7, 43.3, 46.8, 40.9, 49, 45.5, 48.4, 45.8, 49.3, 
    42, 49.2, 46.2, 48.7, 50.2, 45.1, 46.5, 46.3, 42.9, 46.1, 
    44.5, 47.8, 48.2, 50, 47.3, 42.8, 45.1, 59.6, 49.1, 48.4, 
    42.6, 44.4, 44, 48.7, 42.7, 49.6, 45.3, 49.6, 50.5, 43.6, 
    45.5, 50.5, 44.9, 45.2, 46.6, 48.5, 45.1, 50.1, 46.5, 45, 
    43.8, 45.5, 43.2, 50.4, 45.3, 46.2, 45.7, 54.3, 45.8, 49.8, 
    46.2, 49.5, 43.5, 50.7, 47.7, 46.4, 48.2, 46.5, 46.4, 48.6, 
    47.5, 51.1, 45.2, 45.2, 49.1, 52.5, 47.4, 50, 44.9, 50.8, 
    43.4, 51.3, 47.5, 52.1, 47.5, 52.2, 45.5, 49.5, 44.5, 50.8, 
    49.4, 46.9, 48.4, 51.1, 48.5, 55.9, 47.2, 49.1, 47.3, 46.8, 
    41.7, 53.4, 43.3, 48.1, 50.5, 49.8, 43.5, 51.5, 46.2, 55.1, 
    44.5, 48.8, 47.2, NA, 46.8, 50.4, 45.2, 49.9, 46.5, 50, 51.3, 
    45.4, 52.7, 45.2, 46.1, 51.3, 46, 51.3, 46.6, 51.7, 47, 52, 
    45.9, 50.5, 50.3, 58, 46.4, 49.2, 42.4, 48.5, 43.2, 50.6, 
    46.7, 52, 50.5, 49.5, 46.4, 52.8, 40.9, 54.2, 42.5, 51, 49.7, 
    47.5, 47.6, 52, 46.9, 53.5, 49, 46.2, 50.9, 45.5, 50.9, 50.8, 
    50.1, 49, 51.5, 49.8, 48.1, 51.4, 45.7, 50.7, 42.5, 52.2, 
    45.2, 49.3, 50.2, 45.6, 51.9, 46.8, 45.7, 55.8, 43.5, 49.6, 
    50.8, 50.2), bill_dep = c(18.7, 17.4, 18, NA, 19.3, 20.6, 
    17.8, 19.6, 18.1, 20.2, 17.1, 17.3, 17.6, 21.2, 21.1, 17.8, 
    19, 20.7, 18.4, 21.5, 18.3, 18.7, 19.2, 18.1, 17.2, 18.9, 
    18.6, 17.9, 18.6, 18.9, 16.7, 18.1, 17.8, 18.9, 17, 21.1, 
    20, 18.5, 19.3, 19.1, 18, 18.4, 18.5, 19.7, 16.9, 18.8, 19, 
    18.9, 17.9, 21.2, 17.7, 18.9, 17.9, 19.5, 18.1, 18.6, 17.5, 
    18.8, 16.6, 19.1, 16.9, 21.1, 17, 18.2, 17.1, 18, 16.2, 19.1, 
    16.6, 19.4, 19, 18.4, 17.2, 18.9, 17.5, 18.5, 16.8, 19.4, 
    16.1, 19.1, 17.2, 17.6, 18.8, 19.4, 17.8, 20.3, 19.5, 18.6, 
    19.2, 18.8, 18, 18.1, 17.1, 18.1, 17.3, 18.9, 18.6, 18.5, 
    16.1, 18.5, 17.9, 20, 16, 20, 18.6, 18.9, 17.2, 20, 17, 19, 
    16.5, 20.3, 17.7, 19.5, 20.7, 18.3, 17, 20.5, 17, 18.6, 17.2, 
    19.8, 17, 18.5, 15.9, 19, 17.6, 18.3, 17.1, 18, 17.9, 19.2, 
    18.5, 18.5, 17.6, 17.5, 17.5, 20.1, 16.5, 17.9, 17.1, 17.2, 
    15.5, 17, 16.8, 18.7, 18.6, 18.4, 17.8, 18.1, 17.1, 18.5, 
    13.2, 16.3, 14.1, 15.2, 14.5, 13.5, 14.6, 15.3, 13.4, 15.4, 
    13.7, 16.1, 13.7, 14.6, 14.6, 15.7, 13.5, 15.2, 14.5, 15.1, 
    14.3, 14.5, 14.5, 15.8, 13.1, 15.1, 14.3, 15, 14.3, 15.3, 
    15.3, 14.2, 14.5, 17, 14.8, 16.3, 13.7, 17.3, 13.6, 15.7, 
    13.7, 16, 13.7, 15, 15.9, 13.9, 13.9, 15.9, 13.3, 15.8, 14.2, 
    14.1, 14.4, 15, 14.4, 15.4, 13.9, 15, 14.5, 15.3, 13.8, 14.9, 
    13.9, 15.7, 14.2, 16.8, 14.4, 16.2, 14.2, 15, 15, 15.6, 15.6, 
    14.8, 15, 16, 14.2, 16.3, 13.8, 16.4, 14.5, 15.6, 14.6, 15.9, 
    13.8, 17.3, 14.4, 14.2, 14, 17, 15, 17.1, 14.5, 16.1, 14.7, 
    15.7, 15.8, 14.6, 14.4, 16.5, 15, 17, 15.5, 15, 13.8, 16.1, 
    14.7, 15.8, 14, 15.1, 15.2, 15.9, 15.2, 16.3, 14.1, 16, 15.7, 
    16.2, 13.7, NA, 14.3, 15.7, 14.8, 16.1, 17.9, 19.5, 19.2, 
    18.7, 19.8, 17.8, 18.2, 18.2, 18.9, 19.9, 17.8, 20.3, 17.3, 
    18.1, 17.1, 19.6, 20, 17.8, 18.6, 18.2, 17.3, 17.5, 16.6, 
    19.4, 17.9, 19, 18.4, 19, 17.8, 20, 16.6, 20.8, 16.7, 18.8, 
    18.6, 16.8, 18.3, 20.7, 16.6, 19.9, 19.5, 17.5, 19.1, 17, 
    17.9, 18.5, 17.9, 19.6, 18.7, 17.3, 16.4, 19, 17.3, 19.7, 
    17.3, 18.8, 16.6, 19.9, 18.8, 19.4, 19.5, 16.5, 17, 19.8, 
    18.1, 18.2, 19, 18.7), flipper_len = c(181L, 186L, 195L, 
    NA, 193L, 190L, 181L, 195L, 193L, 190L, 186L, 180L, 182L, 
    191L, 198L, 185L, 195L, 197L, 184L, 194L, 174L, 180L, 189L, 
    185L, 180L, 187L, 183L, 187L, 172L, 180L, 178L, 178L, 188L, 
    184L, 195L, 196L, 190L, 180L, 181L, 184L, 182L, 195L, 186L, 
    196L, 185L, 190L, 182L, 179L, 190L, 191L, 186L, 188L, 190L, 
    200L, 187L, 191L, 186L, 193L, 181L, 194L, 185L, 195L, 185L, 
    192L, 184L, 192L, 195L, 188L, 190L, 198L, 190L, 190L, 196L, 
    197L, 190L, 195L, 191L, 184L, 187L, 195L, 189L, 196L, 187L, 
    193L, 191L, 194L, 190L, 189L, 189L, 190L, 202L, 205L, 185L, 
    186L, 187L, 208L, 190L, 196L, 178L, 192L, 192L, 203L, 183L, 
    190L, 193L, 184L, 199L, 190L, 181L, 197L, 198L, 191L, 193L, 
    197L, 191L, 196L, 188L, 199L, 189L, 189L, 187L, 198L, 176L, 
    202L, 186L, 199L, 191L, 195L, 191L, 210L, 190L, 197L, 193L, 
    199L, 187L, 190L, 191L, 200L, 185L, 193L, 193L, 187L, 188L, 
    190L, 192L, 185L, 190L, 184L, 195L, 193L, 187L, 201L, 211L, 
    230L, 210L, 218L, 215L, 210L, 211L, 219L, 209L, 215L, 214L, 
    216L, 214L, 213L, 210L, 217L, 210L, 221L, 209L, 222L, 218L, 
    215L, 213L, 215L, 215L, 215L, 216L, 215L, 210L, 220L, 222L, 
    209L, 207L, 230L, 220L, 220L, 213L, 219L, 208L, 208L, 208L, 
    225L, 210L, 216L, 222L, 217L, 210L, 225L, 213L, 215L, 210L, 
    220L, 210L, 225L, 217L, 220L, 208L, 220L, 208L, 224L, 208L, 
    221L, 214L, 231L, 219L, 230L, 214L, 229L, 220L, 223L, 216L, 
    221L, 221L, 217L, 216L, 230L, 209L, 220L, 215L, 223L, 212L, 
    221L, 212L, 224L, 212L, 228L, 218L, 218L, 212L, 230L, 218L, 
    228L, 212L, 224L, 214L, 226L, 216L, 222L, 203L, 225L, 219L, 
    228L, 215L, 228L, 216L, 215L, 210L, 219L, 208L, 209L, 216L, 
    229L, 213L, 230L, 217L, 230L, 217L, 222L, 214L, NA, 215L, 
    222L, 212L, 213L, 192L, 196L, 193L, 188L, 197L, 198L, 178L, 
    197L, 195L, 198L, 193L, 194L, 185L, 201L, 190L, 201L, 197L, 
    181L, 190L, 195L, 181L, 191L, 187L, 193L, 195L, 197L, 200L, 
    200L, 191L, 205L, 187L, 201L, 187L, 203L, 195L, 199L, 195L, 
    210L, 192L, 205L, 210L, 187L, 196L, 196L, 196L, 201L, 190L, 
    212L, 187L, 198L, 199L, 201L, 193L, 203L, 187L, 197L, 191L, 
    203L, 202L, 194L, 206L, 189L, 195L, 207L, 202L, 193L, 210L, 
    198L), body_mass = c(3750L, 3800L, 3250L, NA, 3450L, 3650L, 
    3625L, 4675L, 3475L, 4250L, 3300L, 3700L, 3200L, 3800L, 4400L, 
    3700L, 3450L, 4500L, 3325L, 4200L, 3400L, 3600L, 3800L, 3950L, 
    3800L, 3800L, 3550L, 3200L, 3150L, 3950L, 3250L, 3900L, 3300L, 
    3900L, 3325L, 4150L, 3950L, 3550L, 3300L, 4650L, 3150L, 3900L, 
    3100L, 4400L, 3000L, 4600L, 3425L, 2975L, 3450L, 4150L, 3500L, 
    4300L, 3450L, 4050L, 2900L, 3700L, 3550L, 3800L, 2850L, 3750L, 
    3150L, 4400L, 3600L, 4050L, 2850L, 3950L, 3350L, 4100L, 3050L, 
    4450L, 3600L, 3900L, 3550L, 4150L, 3700L, 4250L, 3700L, 3900L, 
    3550L, 4000L, 3200L, 4700L, 3800L, 4200L, 3350L, 3550L, 3800L, 
    3500L, 3950L, 3600L, 3550L, 4300L, 3400L, 4450L, 3300L, 4300L, 
    3700L, 4350L, 2900L, 4100L, 3725L, 4725L, 3075L, 4250L, 2925L, 
    3550L, 3750L, 3900L, 3175L, 4775L, 3825L, 4600L, 3200L, 4275L, 
    3900L, 4075L, 2900L, 3775L, 3350L, 3325L, 3150L, 3500L, 3450L, 
    3875L, 3050L, 4000L, 3275L, 4300L, 3050L, 4000L, 3325L, 3500L, 
    3500L, 4475L, 3425L, 3900L, 3175L, 3975L, 3400L, 4250L, 3400L, 
    3475L, 3050L, 3725L, 3000L, 3650L, 4250L, 3475L, 3450L, 3750L, 
    3700L, 4000L, 4500L, 5700L, 4450L, 5700L, 5400L, 4550L, 4800L, 
    5200L, 4400L, 5150L, 4650L, 5550L, 4650L, 5850L, 4200L, 5850L, 
    4150L, 6300L, 4800L, 5350L, 5700L, 5000L, 4400L, 5050L, 5000L, 
    5100L, 4100L, 5650L, 4600L, 5550L, 5250L, 4700L, 5050L, 6050L, 
    5150L, 5400L, 4950L, 5250L, 4350L, 5350L, 3950L, 5700L, 4300L, 
    4750L, 5550L, 4900L, 4200L, 5400L, 5100L, 5300L, 4850L, 5300L, 
    4400L, 5000L, 4900L, 5050L, 4300L, 5000L, 4450L, 5550L, 4200L, 
    5300L, 4400L, 5650L, 4700L, 5700L, 4650L, 5800L, 4700L, 5550L, 
    4750L, 5000L, 5100L, 5200L, 4700L, 5800L, 4600L, 6000L, 4750L, 
    5950L, 4625L, 5450L, 4725L, 5350L, 4750L, 5600L, 4600L, 5300L, 
    4875L, 5550L, 4950L, 5400L, 4750L, 5650L, 4850L, 5200L, 4925L, 
    4875L, 4625L, 5250L, 4850L, 5600L, 4975L, 5500L, 4725L, 5500L, 
    4700L, 5500L, 4575L, 5500L, 5000L, 5950L, 4650L, 5500L, 4375L, 
    5850L, 4875L, 6000L, 4925L, NA, 4850L, 5750L, 5200L, 5400L, 
    3500L, 3900L, 3650L, 3525L, 3725L, 3950L, 3250L, 3750L, 4150L, 
    3700L, 3800L, 3775L, 3700L, 4050L, 3575L, 4050L, 3300L, 3700L, 
    3450L, 4400L, 3600L, 3400L, 2900L, 3800L, 3300L, 4150L, 3400L, 
    3800L, 3700L, 4550L, 3200L, 4300L, 3350L, 4100L, 3600L, 3900L, 
    3850L, 4800L, 2700L, 4500L, 3950L, 3650L, 3550L, 3500L, 3675L, 
    4450L, 3400L, 4300L, 3250L, 3675L, 3325L, 3950L, 3600L, 4050L, 
    3350L, 3450L, 3250L, 4050L, 3800L, 3525L, 3950L, 3650L, 3650L, 
    4000L, 3400L, 3775L, 4100L, 3775L), sex = structure(c(2L, 
    1L, 1L, NA, 1L, 2L, 1L, 2L, NA, NA, NA, NA, 1L, 2L, 2L, 1L, 
    1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 1L, 
    2L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 
    2L, NA, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 
    2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 
    1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 
    2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 
    1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 
    2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 
    1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 
    2L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 
    1L, 2L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, NA, 2L, 1L, 
    2L, 2L, 1L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 
    2L, 1L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 
    2L, 1L, 2L, 1L, 2L, 1L, 2L, NA, 2L, 1L, 2L, 1L, 2L, 2L, 1L, 
    1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 
    2L, 1L, 2L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, 1L, 2L, 
    NA, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, NA, 2L, 1L, 
    NA, 1L, 2L, 1L, 2L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 1L, 2L, 
    1L, 2L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 
    2L, 1L, 2L, 1L, 2L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, 
    2L, 1L, 2L, 1L, 1L, 2L, 1L, 2L, 2L, 1L, 1L, 2L, 1L, 2L, 1L, 
    2L, 1L, 2L, 2L, 1L, 2L, 1L, 1L, 2L, 1L, 2L, 2L, 1L), levels = c("female", 
    "male"), class = "factor"), year = c(2007L, 2007L, 2007L, 
    2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 
    2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 
    2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 
    2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 
    2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 
    2007L, 2007L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 
    2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 
    2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 
    2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 
    2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 
    2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2009L, 2009L, 
    2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 
    2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 
    2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 
    2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 
    2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 
    2009L, 2009L, 2009L, 2009L, 2009L, 2007L, 2007L, 2007L, 2007L, 
    2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 
    2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 
    2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 
    2007L, 2007L, 2007L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 
    2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 
    2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 
    2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 
    2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 
    2008L, 2008L, 2008L, 2008L, 2009L, 2009L, 2009L, 2009L, 2009L, 
    2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 
    2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 
    2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 
    2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 
    2009L, 2009L, 2009L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 
    2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 
    2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 2007L, 
    2007L, 2007L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 
    2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 2008L, 
    2008L, 2008L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 
    2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 
    2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L, 2009L)), row.names = c(NA, 
-344L), class = "data.frame")


penguin_coef_explain_app <- function() {
  ui <- page_sidebar(
    sidebar = sidebar(
      radioButtons("response", "Response",
                         choiceNames = c("body_mass_g", "bill length_mm", "bill depth mm", "flipper length mm"),
                         choiceValues = c(
                           "body_mass",
                           "bill_len",
                           "bill_dep",
                           "flipper_len"
                         ),
                   selected = "body_mass"
      ),
      checkboxGroupInput("pred", "Predictor",
                         choiceValues = c("species", "sex", "interaction"),
                         choiceNames = c(
                           "species",
                           "sex",
                           "interaction"
                         )
      )


    ),
    card(
      textOutput("formula"),
      fill = FALSE
    ),
    card(
      card_header("Coefficients"),
      tableOutput("coef_table")
    ),
    card(
      plotOutput("plot")
    ),
    tags$head(tags$style("#coef_table td{
                     position:relative;
                     };

                     ")),
  )



  server <- function(input, output, session) {
    data <-  penguins |> na.omit()
    data <- data[order(data$species), ]
    data <- data[order(data$sex), ]



    form2 <- reactive({
      form <- paste(input$response,"~")

      if ("interaction" %in% input$pred) {
        paste(form, "species * sex")
      } else if ("species" %in% input$pred & "sex" %in% input$pred) {
        paste(form, "species + sex")
      } else if ("species" %in% input$pred) {
        paste(form, "species")
      } else if ("sex" %in% input$pred) {
        paste(form, "sex")
      } else {
        paste(form, "1")
      }
    })

    observe({
      if ("interaction" %in% input$pred) {
        updateCheckboxGroupInput(session, "pred",
                                 selected = c("species", "sex", "interaction")
        )
      }
    })

    model <- reactive({
      lm(form2(), data = data)
    })

    coefs <- reactive({
      coef(model())
    })

    coef_colours <- reactive({
      c(
        `(Intercept)` = "skyblue",
        speciesChinstrap = "pink",
        speciesGentoo = "red",


        sexmale = "green",
        `speciesChinstrap:sexmale` = "brown",
        `speciesGentoo:sexmale` = "orange"

      )[names(coefs())]
    })

    coef_table <- reactive({
      c1 <- '<div style="width: 100%; height: 100%; z-index: 0; background-color: '
      c2 <- '; position:absolute; top: 0; left: 0; padding:5px;">\n<span>'
      c3 <- "</span></div>"

      tab <- data.frame(
        Beta = paste0(c1, coef_colours(), c2, "\u03B2", seq_along(coefs()), c3),
        Coefficent = names(coefs()),
        Estimate = coefs()
      )
      tab
    })


    output$formula <- renderText(
      paste0("lm(", form2(), ", data = penguins)")
      )
    output$coef_table <- renderTable(
      coef_table(),
      sanitize.text.function = function(x) x
    )
    output$plot <- renderPlot({
      par(par_list)
      set.seed(1)
      f <- as.formula(form2())
      fc <- as.character(f)
      ylim <- c(0, max(data[, input$response]))
      if (fc[3] == "1") {
        stripchart(data[,input$response],
                   method = "jitter", jitter = 0.1,
                   vertical = TRUE, pch = 1, ylim = ylim,
                   ylab = fc[2]
                   )
        axis(side = 1, at = 1, labels = "All penguins")
      } else {
        spp <- levels(data$species)
        sex <- levels(data$sex)
        group_names <-
           if ("species" %in% input$pred & "sex" %in% input$pred) {
          paste("\n", rep(spp, times = length(sex)), rep(sex, each = length(spp)), sep = "\n")
          } else if ("species" %in% input$pred) {
            spp
          } else if ("sex" %in% input$pred) {
            sex
          } else {
            1
          }

        stripchart(f,
                   data = data, method = "jitter", jitter = 0.1,
                   vertical = TRUE, pch = 1, ylim = ylim,
                   group.names = group_names
        )
      }

      cols <- c("species", "sex")[c(grepl("species", fc[3]), grepl("sex", fc[3]))]
      if (length(cols) == 0) {
        cols <- "species"
      }
      pred <- predict(model(), newdata = unique(data[, cols, drop = FALSE]))
      points(seq_along(pred), pred, col = "#832424", pch = 16, cex = 4)

      # add arrows for betas
      lwd <- 3
      xs <- seq_along(pred) - 0.2
      # b0
      arrows(xs, rep(0, length(pred)), xs, rep(coefs()[1], length(pred)),
             col = coef_colours()[1], lwd = lwd, length = 0.1
      )

      # species main effect
      pos <- 2 - 0.2 # x position
      if ("speciesChinstrap" %in% names(coefs())) {
        arrows(pos, coefs()[1], pos, coefs()[1] + coefs()["speciesChinstrap"],
               col = coef_colours()["speciesChinstrap"], lwd = lwd, length = 0.1
        )

        pos <- pos + 1 # move to next position
        arrows(pos, coefs()[1], pos, coefs()[1] + coefs()["speciesGentoo"],
               col = coef_colours()["speciesGentoo"], lwd = lwd, length = 0.1
        )

        pos <- pos + 1 # move to next position
      }

      if ("sexmale" %in% names(coefs())) {
        arrows(pos, coefs()[1], pos, coefs()[1] + coefs()["sexmale"],
               col = coef_colours()["sexmale"], lwd = lwd, length = 0.1
        )
        pos <- pos + 1
      }

      if (all(c("speciesChinstrap", "sexmale") %in% names(coefs()))) {
        #chinstraps
        arrows(pos, coefs()[1], pos, coefs()[1] + coefs()["speciesChinstrap"],
               col = coef_colours()["speciesChinstrap"], lwd = lwd, length = 0.1
        )

        arrows(pos,
               coefs()[1] + coefs()["speciesChinstrap"],
               pos,
               coefs()[1] + coefs()["speciesChinstrap"] + coefs()["sexmale"],
               col = coef_colours()["sexmale"],
               lwd = lwd, length = 0.1
        )

        if ("speciesChinstrap:sexmale" %in% names(coefs())) { # interaction
          arrows(pos,
                 coefs()[1] + coefs()["speciesChinstrap"] + coefs()["sexmale"],
                 pos,
                 coefs()[1] + coefs()["speciesChinstrap"] +
                   coefs()["sexmale"] +
                   coefs()["speciesChinstrap:sexmale"],
                 col = coef_colours()["speciesChinstrap:sexmale"],
                 lwd = lwd, length = 0.1
          )
        }

        # gentoo
        pos <- pos + 1
        arrows(pos, coefs()[1], pos, coefs()[1] + coefs()["speciesGentoo"],
               col = coef_colours()["speciesGentoo"], lwd = lwd, length = 0.1
        )

        arrows(pos,
               coefs()[1] + coefs()["speciesGentoo"],
               pos,
               coefs()[1] + coefs()["speciesGentoo"] + coefs()["sexmale"],
               col = coef_colours()["sexmale"],
               lwd = lwd, length = 0.1
        )

        if ("speciesGentoo:sexmale" %in% names(coefs())) { # interaction
          arrows(pos,
                 coefs()[1] + coefs()["speciesGentoo"] + coefs()["sexmale"],
                 pos,
                 coefs()[1] + coefs()["speciesGentoo"] +
                   coefs()["sexmale"] +
                   coefs()["speciesGentoo:sexmale"],
                 col = coef_colours()["speciesGentoo:sexmale"],
                 lwd = lwd, length = 0.1
          )
        }
      }
    })
  }

  shinyApp(ui, server)
}



par_list <- list(
  mar = c(2.2, 2.2, 0.5, 0.5),
  cex = 1.5,
  tcl = -0.1,
  mgp = c(1.2, 0.2, 0)
)

penguin_coef_explain_app()
```


## Interaction between continuous and categorical predictors

```{r}
#| label: cont-int
#| echo: false
#| fig.width: 10.0
#| fig.height: 6.0

tribble(
  ~type, ~predictor, ~intercept, ~slope,
  "No interaction", "A", 10, 5,
  "No interaction", "B", 12, 5,
  "Interaction - steeper", "A", 10, 5,
  "Interaction - steeper", "B", 12, 8,
  "Interaction - shallower", "A", 10, 5,
  "Interaction - shallower", "B", 12, 3,
) |>
  crossing(continuous = 1:100) |>
  mutate(
    value = continuous * slope / 50 + intercept,
    type = factor(type),
    type = fct_rev(type)
  ) |>
  ggplot(aes(x = continuous, y = value, colour = predictor)) +
  geom_line() +
  facet_wrap(~type) +
  labs(x = "Continuous Predictor", colour = "Categorical\npredictor", y = "Response")
```

---

```{r}
mod_interact <- lm(bill_length_mm ~ sex * flipper_length_mm, data = adelie)
summary(mod_interact)
```



## Interaction between two continuous predictors

```{r}
#| label: cont-cont
#| echo: false
#| fig.width: 8.0
#| fig.height: 6.0
crossing(A = 1:100, B = 1:100, type = c("Interaction", "No interaction")) |>
  mutate(
    type = factor(type),
    type = fct_rev(type),
    response = if_else(type == "Interaction", (A * 7 + B * 5 + A * B * 2) / 10, A * 7 + B * 5)
  ) |>
  ggplot(aes(x = A, y = B, z = response)) +
  geom_contour_filled() +
  facet_wrap(~type) +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  labs(x = "Predictor A", y = "Predictor B", fill = "Response")
```

---

```{r}
mod <- lm(flipper_length_mm ~ body_mass_g * bill_length_mm, data = adelie)
summary(mod)
```

## Power needed for interactions

- Main effect = $\bar{y_1}$ - $\bar{y_2}$
- Interaction = ($\bar{y_1}$ - $\bar{y_2}$) - ($\bar{y_3}$ - $\bar{y_4}$)

```{r}
#| label: power-int
#| echo: false
p2
```

---

```{r}
set.seed(42)
sigma <- 10
n <- 1000
random <- tibble(
  x = sample(c("A", "B"), n, replace = TRUE),
  z = sample(factor(1:2), n, replace = TRUE),
  y = rnorm(n, mean = 0, sd = sigma)
)

lm(y ~ x * z, data = random) |> tidy()
```

## Formula for interactions

y ~ x + z + x:z

y ~ x * z

y ~ (x + z)^2

Use y ~ x + I(x^2) to get a quadratic. Or y ~ poly(x, 2)

---

```{r}
mod1 <- lm(flipper_length_mm ~ species + sex + species:sex, data = penguins)
mod2 <- lm(flipper_length_mm ~ species * sex, data = penguins)
mod3 <- lm(flipper_length_mm ~ (species + sex)^2, data = penguins)

coef(mod1)
coef(mod2)
coef(mod3)
```

## Model Selection

You want to the best model!

The best model for what?

- Exploratory data analysis
- Inference (hypothesis testing)
- Predictions

::: aside
Tredennick et al 2021 A practical guide to selecting models for exploration, inference, and prediction in ecology Ecology. [https://doi.org/10.1002/ecy.3336]( https://doi.org/10.1002/ecy.3336) 
:::

## Exploratory analysis

- Consider all plausible models
- P-values **not** meaningful
- High type I error rate
- Suggest hypotheses for hypothesis testing **with independent data**

The more biology you include in the model, the better 

## Automatic model selection

Last resort - many problems and biases

- Forward selection

- Backwards selection

- All possible models

---

```{r}
#| label: set-options
#| echo: false
old <- options(width = 120)
```


```{r}
library(MuMIn)
library(conflicted)
conflict_prefer("filter", "dplyr")
conflict_prefer("select", "dplyr")

penguins2 <- penguins |>
  drop_na() |>
  select(-year)
full <- lm(body_mass_g ~ ., data = penguins2, na.action = "na.fail")
```

## AIC

AIC Akaike information criterion $2k - 2 \times log(likelihood)$  
	(_k_ the number of parameters)
	
Measure of how well the model fit the data


Penalised for model complexity


AICc correction for small sample sizes

AIC weights - probability model is best of those tested

---

```{r}
dredge(full) |> gt::gt()
```


```{r}
#| label: reset-options
#| echo: false
options(old)
```

## Inference

Test small number of _a priori_ hypothesis.

Use `anova()` to compare nested models

H<sub>0</sub> there is no interaction between sex and species for predicting body mass

```{r}
mod1 <- lm(body_mass_g ~ species + sex, data = penguins)
mod2 <- lm(body_mass_g ~ species * sex, data = penguins)
anova(mod1, mod2)
```

## car::Anova vs anova


```{r}
mod2 <- lm(body_mass_g ~ species + sex, data = penguins)
mod3 <- lm(body_mass_g ~ sex + species, data = penguins)
```

- `anova()` - tests terms sequentially - Anova type I
- `car::Anova()` - marginal test - Anova type II

---

```{r}
anova(mod2)
anova(mod3)
```

---

```{r}
car::Anova(mod2)
car::Anova(mod3)
```


## Multicollinearity

- Two or more predictor variables in a 
multiple regression model are highly 
correlated. Example: pH and 
calcium
- Coefficient estimates are unstable 
  - erratic change in response to small 
changes in the model or the data.

- Solve by having lots of data

--- 

```{r}
#| label: collinearity
col <- performance::check_collinearity(full)
col
plot(col)
```

## Autocorrelation

Linear models assume residuals are independent

If data are spatially or temporally structured, residuals may be correlated.

Positive autocorrelation 

- confidence intervals are too narrow
- increases risk of false positive (Type I error) 


## Luteinising Hormone concentration

```{r}
#| label: autocorrelation
#| echo: true
#| code-fold: true

library(ggfortify)

lh <- fortify(lh) |>
  mutate(time = Index * 10) |>
  rename(concentration = Data)

mod_lh <- lm(concentration ~ time, data = lh)

augment(mod_lh, interval = "confidence") |>
  ggplot(aes(x = time, y = concentration)) +
  geom_line() +
  geom_point() +
  geom_ribbon(aes(ymin = .lower, ymax = .upper), alpha = 0.2, fill = "#ee5050") +
  geom_line(aes(y = .fitted), colour = "#ee5050") +
  labs(x = "Time, minutes", y = "Hormone concentration")
```

## Detecting autocorrelation

For time series with equally-spaced observations, use autocorrelation function (ACF)

```{r}
autoplot(acf(mod_lh$residuals, plot = FALSE))
```

## Detecting autocorrelation

Tests for equally-spaced observations

Durbin-Watson test

```{r}
performance::check_autocorrelation(mod_lh)
```

Other methods for spatial data and non-equally spaced data

Solution - use a model that accounts for autocorrelation

- generalised least squares (`nlme::gls()`)


## Reporting regression results - tables

Make a table - estimates, confidence intervals, p-values

Can calculate confidence intervals with `broom::tidy()` and format output

```{r}
library(gt)
tidy(mod_mult, conf.int = TRUE) |>
  select(term, estimate, conf.low, conf.high, p.value) |>
  mutate(p.value = format.pval(p.value, eps = 0.001)) |>
  gt() |>
  fmt_number(
    columns = c(estimate, conf.low, conf.high),
    decimals = 4
  )
```

## `gtsummary`

Or make table with `gtsummary`

```{r}
library(gtsummary)
tbl <- tbl_regression(mod_mult,
  label = list(
    body_mass_g = "Body mass g",
    flipper_length_mm = "Flipper length mm"
  ),
  estimate_fun = label_style_sigfig(digits = 4)
)
tbl
```

## Reporting regression results - inline

Can extract values directly from regression . 

- estimate
- confidence intervals
- p-value, degrees of freedom, statistic

```{markdown}
Longer flipper length is associated with longer bill length 
(estimate = `r round(coef(mod_mult)["flipper_length_mm"], 2)` mm/mm, 
95% CI = `r round(confint(mod_mult)["flipper_length_mm", ], 2)` 
p = `r format.pval(tidy(mod_mult) |> filter(term == "flipper_length_mm") |> select("p.value"), eps = 0.001)`).
```

Longer flipper length is associated with longer bill length (estimate = `r round(coef(mod_mult)["flipper_length_mm"], 2)` mm/mm, 95% CI = `r round(confint(mod_mult)["flipper_length_mm", ], 2)` p = `r format.pval(tidy(mod_mult) |> filter(term == "flipper_length_mm") |> select("p.value"), eps = 0.001)`).


Also function `inline_text()` from `gtsummary`

See APA guide for reporting statistics
