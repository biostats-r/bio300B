---
title: 'Datalab 9: Generalised linear models'
format: 
  html:
    self-contained: true
---

```{r}
#| label: setup
#| message: false
library(tidyverse)
library(here)
library(broom)

# default theme
theme_set(theme_bw())
```

# Part 1

Relationship between Southern Ocean diatom richness and sea surface temperature.

Data, Esper and Geronde (2014; https://doi.org/10.1016/j.palaeo.2014.08.008), give diatom assemblage composition from surface samples across the Southern Ocean. 
Column diatoms [#] shows the total number of diatoms observed.
Temperature data are not given (could be extracted from an atlas with latitude/longitude), so we will use latitude as a proxy for temperature.

## Download and import data

- Download data as tab-delimited text from https://doi.pangaea.de/10.1594/PANGAEA.828674
- Import the data into R

```{r}
#| label: import-data
#| message: false
# here() find the file relative to the project root
esper <- read_delim(file = here("data/Esper-Gersonde_2014.tab"), skip = 155) |> 
  janitor::clean_names() #tidy column names
```



## Process data
- Find the species richness (i.e. number of columns with diatom percent with abundance > 0) (hint: either use pivot_longer() and group_by() and summarise(), or select() and rowSums())

```{r}
#| label: richness
esper_richness <- esper |> 
  pivot_longer(cols = ends_with("percent"), names_to = "taxa", values_to = "percent") |> # could also cols = a_actinochilus_percent:diatoms_indet_percent (should probably remove diatoms_indet_percent is it not a real species)
  filter(percent > 0) |> # this will fail if any sites have no diatoms. In that case use summarise(n = sum(percent > 0))
  group_by(event, latitude) |> 
  summarise(n = n(), .groups = "drop") # could also use count()
```



## plot and model data

- plot richness against latitude

```{r}
#| label: richness-plot
ggplot(esper_richness, aes(x = latitude, y = n)) +
  geom_point() + 
  labs(x = "Latitude Â°" , y = "Species richness")
```


- fit an appropriate model to find the relationship between richness and latitude

```{r}
#| label: richness-mod
# count data - try a poisson
mod_richness <- glm(n ~ latitude, data = esper_richness, family = poisson)
mod_richness
```

- plot the fitted values from the model with the raw data. Is the model a good fit. Do you need to add extra terms?

```{r}
#| label: diagnostics-poisson
performance::check_model(mod_richness) # under dispersed. Will make model conservative. Probably OK.

```


```{r}
#| label: plot-with-fitted
augment(mod_richness, type.predict = "response") |> 
  ggplot(aes(x = latitude, y = n)) +
  geom_point() +
  geom_line(aes(y = .fitted))

# to get confidence interval
augment(mod_richness, se_fit = TRUE, type.predict = "link") |> 
  mutate(fitted = exp(.fitted), 
         upper = exp(.fitted + 1.96 * .se.fit), 
         lower = exp(.fitted - 1.96 * .se.fit)) |> 
  ggplot(aes(x = latitude, y = n)) +
  geom_point() +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3) +
  geom_line(aes(y = fitted))
```
Model appear to fit the data well. Does not appear to need a quadratic over this section of latitude (but probably decreases at high northern latitudes)

Residual deviance < residual df - no evidence of over-dispersion

- interpret the model coefficients

```{r}
#| label: coef-richness
coef(mod_richness)[1] # log richness when latitude = 0 i.e. equator
coef(mod_richness)[2] # positive slope in link space - proportional change in response space

# remember exp(a + b) = exp(a) * exp(b) 
```

# Part 2

Find the relationship of the presence-absence of _F. cylindrus_  with latitude in the data from above.

```{r}
#| label: f-cylindrus-data
f_cylindrus_df <- esper |> 
  mutate(f_cylindrus = sign(f_cylindrus_percent)) # can also use f_cylindrus_percent > 0
```


- plot the data

```{r}
#| label: f-cylindrus-plot
set.seed(1)
p_fc <- ggplot(f_cylindrus_df, aes(x = latitude, y = f_cylindrus)) +
  geom_jitter(width = 0, height = 0.1)

p_fc
```


- fit an appropriate model

```{r}
#| label: fc-mod
mod_fc <- glm(f_cylindrus ~ latitude, data = f_cylindrus_df, family = binomial)
mod_fc  
performance::check_model(mod_fc) 

```

- add the fitted model, with uncertainties, to the plot

```{r}
#| label: fc-plot2
set.seed(1)
augment(mod_fc, se_fit = TRUE) |> 
  mutate(fitted = plogis(.fitted), 
         upper = plogis(.fitted + 1.96 * .se.fit), 
         lower = plogis(.fitted - 1.96 * .se.fit)) |> 
  ggplot(aes(x = latitude, y = f_cylindrus)) +
  geom_jitter(width = 0, height = 0.1) +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3) +
  geom_line(aes(y = fitted)) +
  scale_y_continuous(breaks = c(0, 1), labels = c("Absent", "Present")) +
  scale_x_continuous(labels = scales::label_number(suffix ="\u00b0")) +
  labs(x = "Latitude", y = expression(italic(F~cylindrus)))
```



# Part 3

Find the relationship between the relative abundance of  _Fragilariopsis kerguelensis_ ("F. kerguelensis [%]"), perhaps the most abundant diatom in the Southern Ocean, with latitude

- plot the data

```{r}
#| label: ra-plot
# need proportion data rather than percent

f_kerguelensis_df <- esper |> 
  mutate(f_kerguelensis_prop = f_kerguelensis_percent/100 )

ggplot(f_kerguelensis_df, aes(x = latitude, y = f_kerguelensis_prop)) +
  geom_point()

```

- fit an appropriate model including a quadratic term if necessary


```{r}
# can fit with proportion and weights
mod_ra <- glm(f_kerguelensis_prop ~ latitude, 
              data = f_kerguelensis_df,
              family = binomial,
              weights = diatoms_number)

# warning message because of rounding errors 
f_kerguelensis_df |> 
  filter(f_kerguelensis_prop > 0) |> 
  mutate(fk = f_kerguelensis_prop * diatoms_number) |> 
  select(f_kerguelensis_prop, fk) |>  
  slice(1:5) |> # non-integers
  as.data.frame() # to make it print the decimals

# can also fit model with 2 column response: successes and failures
f_kerguelensis_df <- f_kerguelensis_df |> 
   mutate(fk = f_kerguelensis_prop * diatoms_number, 
          fk = round(fk), # round to integer
          not_fk = diatoms_number - fk) 

mod_ra2 <- glm(cbind(fk, not_fk) ~ latitude, 
              data = f_kerguelensis_df,
              family = binomial)

#result is same (small differences because of fixing the rounding errors)
tidy(mod_ra)
tidy(mod_ra2)
```

```{r}
performance::check_model(mod_ra) # terrible fit!
```


```{r}
#quadratic model
# why poly
cor(f_kerguelensis_df$latitude, f_kerguelensis_df$latitude ^ 2) # hightly correlated
poly(f_kerguelensis_df$latitude, 2) |> cor() # orthogonal

poly(f_kerguelensis_df$latitude, 2) |> 
  as.data.frame() |> 
  mutate(latitude = f_kerguelensis_df$latitude, 
         LATITUDE = latitude, 
         latitude2 = latitude ^ 2) |> 
  pivot_longer(-LATITUDE) |> 
  ggplot(aes(x = LATITUDE, y = value, colour = name)) +
  geom_line() +
  facet_wrap(vars(name), scales = "free_y")

# quadratic model

mod_bad <- glm(f_kerguelensis_prop ~ latitude + latitude ^ 2, #fails
              data = f_kerguelensis_df,
              family = binomial,
              weights = diatoms_number)

coef(mod_bad) # no quadratic term!
# need to protect quadratic with I() or it is interpreted as an interaction

mod_ra2a <- glm(f_kerguelensis_prop ~ latitude + I(latitude ^ 2), 
              data = f_kerguelensis_df,
              family = binomial,
              weights = diatoms_number)

# with poly
mod_ra2b <- glm(f_kerguelensis_prop ~ poly(latitude, 2), 
              data = f_kerguelensis_df,
              family = binomial,
              weights = diatoms_number)


summary(mod_ra2a)
summary(mod_ra2b)

#is quadratic needed
anova(mod_ra, mod_ra2b) # yes


```

- is there evidence of overdispersion?


```{r}

anova(mod_ra2b) # residual deviance >> residual df
performance::check_model(mod_ra2b) # better but still bad. over dispersed
performance::check_overdispersion(mod_ra2b)
```

- adjust the model if necessary

```{r}
mod_ra_quasi1 <- glm(f_kerguelensis_prop ~poly(latitude, 1), 
              data = f_kerguelensis_df,
              family = quasibinomial,# change to quasibinomial to allow for overdispersion
              weights = diatoms_number)

mod_ra_quasi2 <- glm(f_kerguelensis_prop ~poly(latitude, 2), 
              data = f_kerguelensis_df,
              family = quasibinomial,# change to quasibinomial to allow for overdispersion
              weights = diatoms_number)

#test is quadratic model still needed with quasibinomial
anova(mod_ra_quasi1, mod_ra_quasi2)

# comparing binomial and quasibinomial
tidy(mod_ra2b) # binomial
tidy(mod_ra_quasi2) # quasibinomial
#coefficients are the same


anova(mod_ra_quasi2) # now got "permission" for Resid. Dev/ Resid Df >> 1
performance::check_model(mod_ra_quasi2)
```


- add the fitted model, with uncertainties, to the plot

```{r}
# binomial model
augment(mod_ra2b, se_fit = TRUE) |> 
  mutate(fitted = plogis(.fitted), 
         upper = plogis(.fitted + 1.96 * .se.fit), 
         lower = plogis(.fitted - 1.96 * .se.fit), 
         latitude = esper$latitude) |> 
  ggplot(aes(x = latitude, y = f_kerguelensis_prop)) +
  geom_point() +
  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.3) +
  geom_line(aes(y = fitted)) 

# with quasibinomial
# line on above plot not smooth because bending too much in region with few data points for predictions. Solve by making predictions for new data on regular grid

nd <- tibble(latitude = seq(min(esper$latitude), max(esper$latitude), length.out = 200))

preds <- augment(mod_ra_quasi2, se_fit = TRUE, newdata = nd) |> 
  mutate(fitted = plogis(.fitted), 
         upper = plogis(.fitted + 1.96 * .se.fit), 
         lower = plogis(.fitted - 1.96 * .se.fit)) 

ggplot(f_kerguelensis_df, aes(x = latitude, y = f_kerguelensis_prop)) +
  geom_point() +
  geom_ribbon(aes(ymin = lower, ymax = upper, y  = NULL), data = preds, alpha = 0.3) +
  geom_line(aes(y = fitted), data = preds) +
  scale_x_continuous(labels = scales::label_number(suffix ="\u00b0")) +
  scale_y_continuous(labels = scales::label_percent()) +
  labs(x = "Latitude", y = expression(italic(F~kerguelensis)))
  

# wider ( & more realistic) confidence interval
# much smoother curve
# would want to check obs at 61 S is correct
```

