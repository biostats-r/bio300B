---
title: Data visualisation
subtitle: Bio300B Lecture 4
author: Richard J. Telford (Richard.Telford@uib.no)
institute: Institutt for biovitenskap, UiB
date: today
date-format: "D MMMM YYYY"
format: 
  live-revealjs:
    theme: [default, css/custom.scss]
execute: 
  echo: true
  warning: false
  error: true
webr:
  cell-options:
    autorun: true
    fig-width: 11
    fig-height: 5
  packages:
  - palmerpenguins
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}} 

```{css, echo=FALSE}
.shrink {
  font-size: 60%;
}
```


## Data visualisation

```{r setup, echo=FALSE, message=FALSE}
library("tidyverse")
data(penguins, package = "palmerpenguins")
options(dplyr.print_min = 2, dplyr.print_max = 3)
theme_set(theme_grey(base_size = 18))
library(patchwork)
```

- A picture is worth a thousand words
- Tell a story with figures
- Avoid common mistakes

> "reflect the data, tell a story, and look professional"
> Wilke

## ggplot2

- one of at least three schemes for graphics in R
- part of tidyverse

> A system for 'declaratively' creating graphics, based on "The Grammar of Graphics".

> You provide the data, tell 'ggplot2' how to map variables to aesthetics, what graphical primitives to use, it takes care of the details.

## ggplot in action

```{r}
#| label: make_plot
#| output-location: slide
#| 
plot <- ggplot(data = penguins,     # Data
       mapping = aes(               # Aesthetics
         x = body_mass_g,    
         y = bill_length_mm, 
         colour = species)) +
  geom_point() +                    # Geometries
  scale_colour_brewer(palette = "Set2") + # scales
  labs(x = "Body mass, g",          # labels
       y = "Bill length mm", 
       colour = "Species") +
  theme_bw()                        # themes
                                    # Also facets
plot
```


## Data 

Tibble or data frame with data to be plotted.

Tidy data

Can process data within `ggplot` but usually best to do it first

Can add data to the whole plot or to individual geoms

```{r}
penguin_summary <- penguins |> group_by(species) |> summarise(body_mass_g = mean(body_mass_g, na.rm = TRUE), bill_length_mm = mean(bill_length_mm, na.rm = TRUE) )
ggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, colour = species)) +
  geom_point() +
  geom_text(aes(label = species), data = penguin_summary, colour = "black")
```


## Aesthetics

`mapping` specifies which variables in the data should be mapped onto
which aesthetics with `aes()`

Each geom takes different aesthetics

Common aesthetics

- x, y
- fill, colour, alpha
- shape
- linetype
- group

## Setting vs mapping

:::: {.columns}

::: {.column width="50%"}
### Mapping in aes()
```{r mapping, fig.height = 3, fig.width=4}
ggplot(penguins, 
       aes(x = flipper_length_mm, 
           fill = "blue")) +
geom_histogram()
```
:::

::: {.column width="50%"}
### Setting in the geom
```{r setting, fig.height = 3, fig.width=3}
ggplot(penguins, 
       aes(x = flipper_length_mm)) +
geom_histogram(fill = "blue")
```
:::

::::

## geoms


Use different geoms for different plot types

Important geoms

- `geom_point()`
- `geom_boxplot()`
- `geom_histogram()`
- `geom_smooth()`
- `geom_line()`
- `geom_text()`

Many geoms, some in extra packages

## Geoms to show distributions

### Histogram

Count how many observations in each bin

```{r}
#| label: hist-code
#| eval: false

ggplot(penguins, aes(x = flipper_length_mm)) + geom_histogram()
```

Critical question - how many bins? Set with `bins` argument

```{webr}
#| label: hist-webr
#| edit: false
#| output: false
#| define:
#|   - do_penguins_hist
do_penguins_hist <- function(species, measure, bins) {
  
peng <- penguins[penguins$species == species, ][, measure, drop = TRUE] |> 
  na.omit()

breaks <- seq(min(peng), max(peng), length.out = bins + 1)

par(mar = c(3, 3, 1, 1), mgp = c(1.5, 0.5, 0), tcl = -0.3, cex = 1.5)
hist(peng, main = species, breaks = breaks,
     xlab = gsub(pattern = "_", replacement = " ", x = measure),
     col = c(Adelie = "#99000090", Chinstrap = "#1100dd90", Gentoo = "#00bb1090")[species]
     )
invisible()
}

```
::: {.shrink}

:::: {.columns}
::: {.column}
```{ojs}
//| label: hist-ojs
//| echo: false

viewof bins = Inputs.range(
  [ 1, 50 ], 
  { label: "Number of bins", step: 1, value: 30 }, 
)

viewof measure2 = Inputs.select(
  [ "flipper_length_mm", "bill_length_mm", "bill_depth_mm", "body_mass_g" ],
  { label: "Measure" }
);

viewof species = Inputs.select(
  [ "Adelie", "Chinstrap", "Gentoo" ],
  { label: "Species" }
);

```
:::
::: {.column}
```{ojs}
//| label: hist2-ojs
//| echo: false
do_penguins_hist(species, measure2, bins);
```
:::
::::

:::

## Density

Smoothed histograms

```{r}
ggplot(penguins, aes(x = flipper_length_mm)) + geom_density()
```

`adjust` argument adjusts bandwidth to control how smooth

```{webr}
#| label: density-webr
#| edit: false
#| output: false
#| define:
#|   - do_penguins_density
do_penguins_density <- function(measure, adjust) {
  
peng_d <- split(penguins[[measure]], f = penguins$species) |> 
  lapply(na.omit) |> 
  lapply(density, adjust = adjust)

par(mar = c(3, 3, 1, 1), mgp = c(1.5, 0.5, 0), tcl = -0.3, cex = 1.5)
plot(peng_d[[1]], type = "n", main = "", 
     xlab = gsub(pattern = "_", replacement = " ", x = measure), 
     xlim = range(lapply(peng_d, \(d)range(d$x))),
     ylim = range(lapply(peng_d, \(d)range(d$y))))
mapply(\(d, col)polygon(d, col = col, border = substr(col, 1, 7)), d = peng_d, col = c("#99000090", "#1100dd90", "#00bb1090"))
invisible()
}


```
::: {.shrink}
:::: {.columns}
::: {.column}
```{ojs}
//| label: density-ojs
//| echo: false

viewof adjust = Inputs.range(
  [ 0.1, 2 ], 
  { label: "Adjust density", step: 0.1, value: 1 }, 
)

viewof measure = Inputs.select(
  [ "flipper_length_mm", "bill_length_mm", "bill_depth_mm", "body_mass_g" ],
  { label: "Measure" }
);
```

:::
::: {.column}
```{ojs}
//| label: density-ojs2
//| echo: false

do_penguins_density(measure, adjust);
```

:::
::::
:::


## Geoms to show many distributions

```{r}
#| label: boxplots-etc
#| 
base <- ggplot(penguins, aes(x = species, y = flipper_length_mm))

p_prange <- base + stat_summary(fun = "mean", geom = "col")
p_box <- base + geom_boxplot(aes(fill = species))
p_vio <- base + geom_violin(aes(fill = species))
p_jit <- base + geom_jitter(aes(colour = species))
library(ggbeeswarm)
p_quasi <- base + geom_quasirandom(aes(colour = species))
p_quasi2 <- base + geom_violin(aes(fill = species), alpha = 0.3) +
  geom_quasirandom(aes(colour = species))

```

---

```{r}
#| label: boxplots-etc-plot
#| echo: false
#| fig-width: 12
#| fig-height: 7

p_prange + labs(title= "geom_col()") + 
p_box + labs(title = "geom_boxplot()") +
  p_vio + labs(title = "geom_violin()") +
  p_jit + labs(title = "geom_jitter()") +
  p_quasi + labs(title = "geom_quasirandom()") +
  p_quasi2 + labs(title = "quasirandom & violin") +
  plot_layout(nrow = 2) &
  labs(y = "Flipper length") &
  theme(axis.title.x = element_blank(), legend.position = "none")
```

## Boxplots can mislead

```{r datasaurus}
p <- datasauRus::box_plots |> 
  pivot_longer(everything()) |> 
  ggplot(aes(x = name, y = value))

p + geom_boxplot() +
p + geom_violin()
```
## Show the raw data

```{r}
#| label: pnas-fig
#| echo: false
#| fig-alt: top left panel shows mean + SE only, top right shows mean + SE togther with widely spread jittered raw data Bottom plots show the same with more data so SE are smaller
#| out-height: 15cm
knitr::include_graphics("figures/pnas.2302491120fig01.jpg")
```

::: aside
[Zhang et al (2023)](https://www.pnas.org/doi/10.1073/pnas.2302491120)
:::

## geoms for scatterplots

```{r}
ggplot(penguins, aes(x = body_mass_g,  y = bill_length_mm, colour = species)) +
  geom_point() +
  geom_smooth(method = "lm")
```


## Scales

Control how 

- variables are mapped onto the aesthetics
- axes breaks

All called scale_aesthetic_description

- `scale_x_log()`
- `scale_y_reverse()`
- `scale_colour_viridis_c()`
- `scale_shape_manual()`

## Labels

- plot, axis and legend titles

```{r labs, fig.height = 4}
ggplot(penguins, aes(x = body_mass_g, y = bill_length_mm, colour = species)) +
  geom_point() +
  labs(x = "Body mass g",
       y = "Bill length mm", 
       colour = "Species", 
       title = "Bill length against body mass ") 
```



## Facets

Split data into separate panels.

```{r facets, fig.height = 5}
plot + facet_wrap(facets = vars(species))
```


---

`facet_grid()` for two dimensional arrays of subplots

```{r facet-grid, fig.height = 5}
plot + facet_grid(
  rows = vars(species),
  cols = vars(island)
)
```

## Themes

Change how non-data elements of the plot look

Entire themes

```{r themes, echo = FALSE, fig.width=9, fig.height=6}
plot + theme_grey() + labs(title = "theme_grey()") +
plot + theme_bw() + labs(title = "theme_bw()") +
plot + theme_classic() + labs(title = "theme_classic()") +
plot + theme_minimal() + labs(title = "theme_minimal()") 
  
```

## Themes

Can also change individual elements

```{r theme2, fig.height=5}
plot + theme(legend.position = "top")
```

## Removing elements

```{r theme3, fig.height=5}
plot + theme(panel.grid = element_blank())
```

## Colour & fills

```{r fill-colour, echo = FALSE}
fill <- ggplot(penguins, aes(x = species, y = flipper_length_mm, fill = species)) +
  geom_boxplot()

colour <- ggplot(penguins, aes(x = species, y = flipper_length_mm, colour = species)) +
  geom_boxplot()

colour + labs(title = "colour = species") + fill + labs(title = "fill = species") & theme(legend.position = "none")

as <- ggplot(penguins, aes(x = species,  y = flipper_length_mm, fill = species, colour = after_scale(colorspace::darken(fill, amount = 0.4)))) +
  geom_boxplot()
```

## Avoid primary colours

```{r}
ggplot(penguins, aes(x = flipper_length_mm, fill = species)) +
  geom_histogram() +
  scale_fill_manual(values = c("red", "green", "blue")) +
  labs(x = "Flipper length mm")
```



## Colour deficient vision

```{r cvd, fig.width=8, fig.height=6}
den <- ggplot(penguins, aes(x = bill_length_mm, fill = species)) +
  geom_density(alpha = 0.7)
den
```

---

```{r cvd-grid, fig.width=9, fig.height=7}
colorBlindness::cvdPlot(den)
```


## \#End rainbow

```{r endrainbow, echo = FALSE}
knitr::include_graphics("figures/jpe12646-fig-0003-m.webp")
```

##

```{r echo = FALSE}
n <- 100
rainb <- rainbow(n = n)

rb <- ggplot(data = NULL, aes(x = 1:n, y = 1, fill = I(rainb))) +
  geom_tile() +
  scale_x_continuous(expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  theme(axis.title = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank())


colorBlindness::cvdPlot(rb)
```


## Better colour scale

```{r cvd2, fig.width=8, fig.height=6}
den <- ggplot(penguins, aes(x = bill_length_mm, fill = species)) +
  geom_density(alpha = 0.7) +
  scale_fill_brewer(palette = "Set2")
den
```

---

```{r cvd2-grid, fig.width=9, fig.height=7}
colorBlindness::cvdPlot(den)
```

## Using colour effectively

Choose an appropriate palette.

### Qualitative palettes

```{r brewer-qual}
RColorBrewer::display.brewer.all(type = "qual")
```

---

### Sequential palettes

```{r brewer-seq}
RColorBrewer::display.brewer.all(type = "seq")
```

---

### Dividing palettes

```{r brewer-div}
RColorBrewer::display.brewer.all(type = "div")
```


## Viridis

```{r viridis, message = FALSE}
ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm)) +
  geom_point(aes(colour = flipper_length_mm)) +
  scale_colour_viridis_c()
```

## Highlight

```{r highlight, message = FALSE}
ggplot(penguins, aes(x = body_mass_g, y = flipper_length_mm)) +
  geom_point(colour = "red") +
  gghighlight::gghighlight(species == "Chinstrap")
```

## Redundant encoding 

```{r}
ggplot(penguins, 
       aes(x = body_mass_g,
           y = flipper_length_mm,
           colour = species,
           shape = species)) +
  geom_point() 
```

## Avoiding legends

```{r direct-labels, fig.height=5}
library(directlabels)
direct.label(plot) 
```

## Avoiding overplotting

Problem - points plot on top of each other.

```{r}
#| label: overplotting
#| echo: false
#| fig-width: 11
(diamonds |> 
  ggplot(aes(x = carat, y = price)) +
  geom_point() +
  labs(title = "Original"))+
(diamonds |> 
  ggplot(aes(x = carat, y = price)) +
  geom_point(alpha = 0.1) +
  labs(title = "Reduce alpha"))+
(diamonds |> 
  ggplot(aes(x = carat, y = price)) +
  geom_hex() +
  scale_fill_viridis_c() +
  labs(title = "Hex bin"))

```


- also jitter for ~discrete data


## Most common mistake in presentations

```{r}
#| label: common-mistake
#| echo: false
#| fig-alt: plot with very small labels
ggplot(penguins, 
       aes(x = body_mass_g,
           y = flipper_length_mm,
           colour = species,
           shape = species)) +
  geom_point() +
  labs(x = "Body mass g", y = "flipper length mm", colour = "Species") +
  theme_bw()
```

::: {.fragment}
### Solution

```{r}
#| label: base-size
#| eval: false
theme_bw(base_size = 18)
```
:::

## Summary

- If you can imagine it, you can plot it
- Whole ecosystem of packages to help

## Further reading

#### [Fundamentals of Data Visualization](https://clauswilke.com/dataviz/)

```{r}
#| label: fun-data-vis
#| echo: false
#| fig-alt: Front cover of Fundamentals of Data Visualization showing a Western Rosella Parakeet
knitr::include_graphics("figures/fdv-cover.png")
```

